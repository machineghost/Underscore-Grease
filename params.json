{
  "name": "Underscore-grease",
  "tagline": "Making Underscore Chaining More Slick",
  "body": "Underscore Grease\r\n=================\r\n\r\n\"Fun Underscore.js plugin that provides a cleaner way to do chaining â€¦ if chaining how you roll\" - Jeremy Ashkenas, creator of Underscore.\r\n\r\n###Making Underscore Chaining Slicker###\r\n\r\nIn jQuery, chaining is nice and simple:\r\n\r\n    $(someElement).css('color', 'red').show();\r\n\r\nBut while jQuery methods only rarely have return values, all Underscore methods do, which means that Underscore can't chain methods unless you tell it when to start/stop chaining.  Because of this, Underscore's chaining syntax isn't as simple as jQuery's:\r\n\r\n     _(foo).chain().without({foo:bar}).compact().value();\r\n\r\nThis mix-in solves that problem by providing an alternative chaining syntax:\r\n\r\n    _(foo).without_({foo:bar}).compact();\r\n\r\nIn other words, this mix-in adds new versions of every method in Underscore (except chain; that would be pointless), and each of those new versions has a \"_\" at the end of the original method name.  When these \"greased\" versions of Underscore methods are called, they return an Underscore-wrapped version of whatever result their non-greased version would have returned.\r\n\r\nThis allows you to chain as many methods as you want, without ever having to invoke either chain or value:\r\n\r\n    _(foo).without_({foo:bar}).compact_().flatten_().items();\r\n\r\nTo use Underscore Grease simply download and add `underscore.grease.js` to your environment (or, for a production environment, use `underscore.grease.min.js` instead).  It's that simple.\r\n\r\nUnderscore Grease was created by Jeremy Walker with feedback from GitHub user Nami-Doc. It is licensed under the [MIT License](http://opensource.org/licenses/MIT).\r\n\r\nFor the historical origins of Underscore Grease see [this GitHub issue thread](https://github.com/documentcloud/underscore/issues/933)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}